var test = require('tap').test
var Pusher = require('../index')
var utils = require('../lib/utils')

test('event adder', function (t) {
  t.test('can add events', function (t) {
    var pusher = new Pusher('','', {harvester: false})

    pusher.addEvent('test', {key: 'value'})

    t.equal(pusher._events.length, 1, 'should have a length')
    var event = pusher._events[0]
    t.equal(event.eventType, 'test', 'eventType get set')
    t.equal(event.key, 'value', 'data is in event')
    t.ok(event.timestamp, 'has a timestamp')
    t.ok(pusher._oldest_timestamp, '_oldest_timestamp gets set')
    t.equal(pusher._oldest_timestamp, event.timestamp, 'timestamps should be the same')
    t.end()
  })

  t.test('leaves existing timestamps in place', function (t) {
    var pusher = new Pusher('','', {harvester: false})

    var timestamp = utils.unix_now()-1000

    pusher.addEvent('test', {key: 'value', timestamp: timestamp})

    t.equal(pusher._events.length, 1, 'should have a length')
    var event = pusher._events[0]
    t.equal(event.eventType, 'test', 'eventType get set')
    t.equal(event.key, 'value', 'data is in event')
    t.equal(event.timestamp, timestamp)
    t.ok(pusher._oldest_timestamp, '_oldest_timestamp gets set')
    t.equal(pusher._oldest_timestamp, event.timestamp, 'timestamps should be the same')
    t.end()
  })

  t.test('flushes when hitting max events', function (t) {
    var pusher = new Pusher('', '', {
      harvester: false,
      min_events: 1,
      max_events: 3
    })
    var called = false
    pusher._harvest = function () {
      called = true;
    }
    pusher.addEvent('test', {})
    t.equal(called, false, 'should not have flushed yet')
    pusher.addEvent('test', {})
    t.equal(called, false, 'should not have flushed yet')
    pusher.addEvent('test', {})
    t.equal(called, true, 'hit max, should flush')
    t.end()
  })

  t.test('reject events over 24 hours old', function () {
    var pusher = new Pusher('', '', {
      harvester: false
    })
    var dayAgo = utils.unix_now()-utils.day_in_secs
    pusher.addEvent('test', {timestamp: dayAgo})
    t.equal(pusher._events.length, 0, 'Event should have been rejected')
    t.end()
  })
})
